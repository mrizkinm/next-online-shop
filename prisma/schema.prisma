// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  products  Product[] @relation("CategoryToProduct")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Int
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]     @relation("ProductToImage")
  description String
  quantity    Int         @default(0)
  orderItems  OrderItem[] @relation("ProductToOrderItem") // Relasi ke OrderItem
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
}

model Image {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation("ProductToImage", fields: [productId], references: [id])
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  customerId  Int?        // ID pelanggan, nullable jika memungkinkan pemesanan tanpa akun
  customer    Customer?   @relation(fields: [customerId], references: [id]) // Relasi opsional ke tabel Customer
  guestInfo   Json?
  items       OrderItem[] @relation("OrderToOrderItem")
  totalAmount Int         // Total biaya pesanan
  status      String      // Status pesanan (e.g., 'Pending', 'Completed', 'Canceled')
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId   Int
  product    Product  @relation("ProductToOrderItem", fields: [productId], references: [id]) // Relasi dua arah
  quantity    Int      // Jumlah item yang dipesan
  price       Int      // Harga satuan saat dipesan
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([orderId, productId])
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String    // Nama pelanggan
  email     String?   @unique // Email pelanggan, opsional tetapi unik
  phone     String?   // Nomor telepon pelanggan
  address   String?   // Alamat pelanggan
  orders    Order[]   @relation // Relasi ke tabel Order
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Shop {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}